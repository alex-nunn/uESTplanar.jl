var documenterSearchIndex = {"docs":
[{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Convolutions-in-2D-dimensions","page":"Examples","title":"Convolutions in 2D dimensions","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The KernelConvolution type allows us to rapidly convolve 2-dimensional  functions with a kernel function. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For example, we can convolve the 2-dimensional box function f(x y) with a Gaussian kernel using the following code.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Plots\nusing uESTplanar\n\n# 1. Define convolution kernel\nσ = 0.3\nkconv = KernelConvolution(\n    range(-2, 2; step=0.005),\n    range(-2, 2; step=0.005),\n    (x, y)-> exp(-(x^2 + y^2) / (2σ^2)) / (sqrt(2π) * σ)\n)\n\n# 2. Define box function & compute over grid\nf = (x, y) ->  -1 < x < 1 && -1 < y < 1 ? 1.0 : 0.0\n(; xs, ys) = kconv\nboundary_values = f.(xs, ys')\n\n# 3. Apply kernel transform\nresult = kconv(boundary_values)\n\n# 4. Plot potential\nheatmap(\n    xs, ys, transpose(result);\n    xlabel=\"x\",\n    ylabel=\"y\",\n    size=(500, 500),\n    aspect_ratio=:equal,\n    dpi=200\n)\nsavefig(\"01_convolution_example.png\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = uESTplanar","category":"page"},{"location":"#uESTplanar","page":"Home","title":"uESTplanar","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for uESTplanar.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [uESTplanar]","category":"page"},{"location":"#uESTplanar.K-Tuple{Any, Any, Any}","page":"Home","title":"uESTplanar.K","text":"K(x, y, z)\n\nPlanar electrostatic trap kernel in cartesian coordinates where 0 < z < 1 and x, y are real valued horizontal coordinates. The bottom and top plates of the trap are located at z = 0 and z = 1, respectively.\n\nUseful for computing the electrostatic field via convolution.\n\nSee also ∂xK, ∂yK, ∂zK.\n\n\n\n\n\n","category":"method"},{"location":"#uESTplanar.K-Tuple{Any, Any}","page":"Home","title":"uESTplanar.K","text":"K(ρ, z)\n\nPlanar electrostatic trap kernel in cylindrical coordinates where 0 < ρ, 0 < z < 1.\n\n\n\n\n\n","category":"method"},{"location":"#uESTplanar.∂xK","page":"Home","title":"uESTplanar.∂xK","text":"∂xK(x, y, z)\n\nPartial derivative wrt. x of planar electrostatic trap kernel in cartersian  coordinates where 0 < z < 1.\n\nSee also K\n\n\n\n\n\n","category":"function"},{"location":"#uESTplanar.∂yK","page":"Home","title":"uESTplanar.∂yK","text":"∂yK(x, y, z)\n\nPartial derivative wrt. y of planar electrostatic trap kernel in cartersian  coordinates where 0 < z < 1.\n\nSee also K\n\n\n\n\n\n","category":"function"},{"location":"#uESTplanar.∂zK","page":"Home","title":"uESTplanar.∂zK","text":"∂zK(x, y, z)\n\nPartial derivative wrt. z of planar electrostatic trap kernel in cartersian  coordinates where 0 < z < 1.\n\nSee also K\n\n\n\n\n\n","category":"function"}]
}
